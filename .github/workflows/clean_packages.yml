name: Delete old container images

on: workflow_dispatch

jobs:
  build-containers:
    name: Build a few images
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        run: docker login ghcr.io -u sondrelg --password-stdin <<< ${{ secrets.PAT }}
      - name: Build latest
        run: echo $'FROM scratch\nCMD ["$RANDOM"]' > Dockerfile.test && docker buildx build . -f Dockerfile.test -t "ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --cache-to=type=inline --cache-from="ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --push
      - name: Build latest
        run: echo $'FROM scratch\nCMD ["$RANDOM"]' > Dockerfile.test && docker buildx build . -f Dockerfile.test -t "ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --cache-to=type=inline --cache-from="ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --push
      - name: Build latest
        run: echo $'FROM scratch\nCMD ["$RANDOM"]' > Dockerfile.test && docker buildx build . -f Dockerfile.test -t "ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --cache-to=type=inline --cache-from="ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --push
      - name: Build latest
        run: echo $'FROM scratch\nCMD ["$RANDOM"]' > Dockerfile.test && docker buildx build . -f Dockerfile.test -t "ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --cache-to=type=inline --cache-from="ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --push
      - name: Build latest
        run: echo $'FROM scratch\nCMD ["$RANDOM"]' > Dockerfile.test && docker buildx build . -f Dockerfile.test -t "ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --cache-to=type=inline --cache-from="ghcr.io/sondrelg/ghcr-retention-policy-test:latest" --push
  clean-ghcr:
    needs: build-containers
    name: Then delete them
    runs-on: ubuntu-latest
    steps:
      - name: Cache(d) image versions to skip
        uses: actions/cache@v2
        with:
          path: skip-image-versions.txt
          # key will always *not* match for a new commit, but
          # restore-key will match if there's a previously stored
          # file; so cache will *both be loaded and stored*.
          key: image-versions-to-skip-${{ github.sha }}
          restore-keys: image-versions-to-skip

      - name: Create file if it doesn't exist
        run: touch skip-image-versions.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Output file content
        run: cat skip-image-versions.txt

      - name: Delete images more than 2 seconds old
        uses: sondrelg/container-retention-policy@sondrelg/experiment
        id: delete-images
        with:
          image-names: ghcr-retention-policy-test
          cut-off: 2 seconds ago UTC+2
          account-type: personal
          token: ${{ secrets.PAT }}

      - name: Write skipped tags to cache
        run: |
          echo "${{ steps.delete-images.outputs.needs-github-assistance }}"
          echo "${{ steps.delete-images.outputs.failed }}"
          echo "${{ steps.delete-images.outputs.deleted }}"
          echo "${{ steps.delete-images.outputs.failed }}" > skip-image-versions.txt

      - name: Output file content
        run: cat skip-image-versions.txt
